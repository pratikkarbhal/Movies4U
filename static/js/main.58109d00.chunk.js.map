{"version":3,"sources":["MovieCard.js","App.js","registerServiceWorker.js","index.js"],"names":["MovieCard","url","this","props","movie","id","window","location","href","className","alt","width","src","poster_src","title","overview","type","onClick","viewMovie","bind","value","React","Component","App","state","performSearch","searchTerm","console","log","urlString","$","ajax","success","searchResults","results","movieRows","forEach","poster_path","movieRow","push","setState","rows","error","xhr","status","err","event","target","onChange","searchChangeHandler","placeholder","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.58109d00.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\n\nclass MovieCard extends React.Component {\n  viewMovie() {\n    // console.log(\"Trying to view movie\")\n    // console.log(this.props.movie.title)\n    const url = \"https://www.themoviedb.org/movie/\" + this.props.movie.id\n    window.location.href = url\n  }\n\n  render() {\n    return <table key={this.props.movie.id} className=\"table\">\n    <tbody>\n      <tr className=\"tr\">\n        <td className=\"img\">\n          <img className=\"imgsize\" alt=\"No-poster\" width=\"120\" src={this.props.movie.poster_src}/>\n        </td>\n        <td className=\"td\">\n          <h3 className=\"h3\">{this.props.movie.title}</h3>\n          \n        <p className=\"p\">{this.props.movie.overview}</p><input className=\"button\" type=\"button\" onClick={this.viewMovie.bind(this)} value=\"View\"/>\n\n        </td>\n      </tr>\n    </tbody>\n  </table>\n  }\n}\n\nexport default MovieCard","import React, { Component } from 'react';\nimport './App.css';\nimport MovieCard from './MovieCard.js'\nimport $ from 'jquery'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.performSearch(\"marvel\")\n  }\n\n  performSearch(searchTerm) {\n    console.log(\"Perform search using moviedb api\")\n    const urlString = \"https://api.themoviedb.org/3/search/movie?api_key=c6d9985b1d8a75308e7869e248eda86c&language=en-US&query=\" + searchTerm\n    \n    $.ajax({\n      url: urlString,\n      success: (searchResults) => {\n        console.log(\"Fetched movie data from url,data stored in searchResults\")\n        const results = searchResults.results\n\n        var movieRows = []\n\n        results.forEach((movie) => {\n          movie.poster_src = \"https://image.tmdb.org/t/p/w185\" + movie.poster_path\n          const movieRow = <MovieCard key={movie.id} movie={movie}/>\n          movieRows.push(movieRow)\n        })\n\n        this.setState({rows: movieRows})\n      },\n      error: (xhr, status, err) => {\n        console.error(\"Failed to fetch data\")\n      }\n    })\n  }\n\n  searchChangeHandler(event) {\n    console.log(event.target.value)\n    const boundObject = this\n    const searchTerm = event.target.value\n    boundObject.performSearch(searchTerm)\n  }\n\n  render() {\n    return (\n      <div>\n        \n        <table className=\"titleBar\">\n          <tbody>\n            <tr>\n              <td>\n                <img alt=\"app icon\" width=\"50\" src=\"logo.png\"/>\n              </td>\n              <td width=\"8\"/>\n              <td>\n                <h1 className=\"h1\">Movies4U</h1>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n\n        <input className=\"search\" onChange={this.searchChangeHandler.bind(this)} placeholder=\"  Start typing a keyword here...\"/>\n\n        {this.state.rows}\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}